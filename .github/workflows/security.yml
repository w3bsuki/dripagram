name: üîí Security Scanning

on:
  schedule:
    # Run security scans weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: üìã Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Run pnpm audit
        run: pnpm audit --audit-level high
        continue-on-error: true

      - name: üìä Generate audit report
        run: |
          pnpm audit --json > audit-report.json || true
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat audit-report.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: üö® Check for critical vulnerabilities
        run: |
          CRITICAL_COUNT=$(pnpm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(pnpm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found!"
            exit 1
          fi
          
          if [ "$HIGH_COUNT" -gt 5 ]; then
            echo "‚ö†Ô∏è Too many high-severity vulnerabilities found!"
            exit 1
          fi

  # Code security scanning
  codeql:
    name: üîé CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: üìã Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build for analysis
        run: pnpm run build
        env:
          PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          PUBLIC_SUPABASE_ANON_KEY: placeholder-anon-key-for-analysis

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Secret scanning
  secret-scan:
    name: üîê Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Environment variable security check
  env-security:
    name: üåç Environment Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Check for exposed secrets in public env vars
        run: |
          echo "Checking for potential secrets in environment variable names..."
          
          # Check for suspicious patterns in env var names
          if grep -r "SECRET\|KEY\|TOKEN\|PASSWORD" --include="*.ts" --include="*.js" --include="*.svelte" . | grep -v "PUBLIC_" | grep -v "node_modules" | grep -v ".git"; then
            echo "‚ùå Found potential secrets in non-PUBLIC environment variables"
            echo "Please ensure all secrets use proper secret management"
          else
            echo "‚úÖ No obvious secret exposure found"
          fi

      - name: üîç Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded secrets..."
          
          # Simple pattern matching for common secret formats
          PATTERNS=(
            "sk_live_"
            "sk_test_"
            "rk_live_"
            "pk_live_"
            "-----BEGIN RSA PRIVATE KEY-----"
            "-----BEGIN PRIVATE KEY-----"
            "AKIA[0-9A-Z]{16}"
            "ghp_[a-zA-Z0-9]{36}"
            "gho_[a-zA-Z0-9]{36}"
          )
          
          FOUND=false
          for pattern in "${PATTERNS[@]}"; do
            if grep -r "$pattern" --include="*.ts" --include="*.js" --include="*.svelte" --include="*.json" . --exclude-dir=node_modules --exclude-dir=.git; then
              echo "‚ùå Found potential hardcoded secret: $pattern"
              FOUND=true
            fi
          done
          
          if [ "$FOUND" = true ]; then
            echo "‚ùå Hardcoded secrets detected! Please remove them and use environment variables."
            exit 1
          else
            echo "‚úÖ No hardcoded secrets found"
          fi

  # License compliance check
  license-check:
    name: üìÑ License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: üìã Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Check licenses
        run: |
          echo "Checking dependency licenses..."
          npx license-checker --summary --excludePrivatePackages
          
          echo "Checking for problematic licenses..."
          PROBLEMATIC=$(npx license-checker --json --excludePrivatePackages | jq -r 'to_entries[] | select(.value.licenses | test("GPL|LGPL|AGPL"; "i")) | .key')
          
          if [ -n "$PROBLEMATIC" ]; then
            echo "‚ùå Found packages with potentially problematic licenses:"
            echo "$PROBLEMATIC"
            echo "Please review these licenses and ensure they're compatible with your project"
            exit 1
          else
            echo "‚úÖ No problematic licenses found"
          fi

  # Security summary
  security-summary:
    name: üìã Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, secret-scan, env-security, license-check]
    if: always()

    steps:
      - name: üìä Generate security summary
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Security | ${{ needs.env-security.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical security checks failed
          if [[ "${{ needs.dependency-scan.result }}" != "success" || "${{ needs.secret-scan.result }}" != "success" || "${{ needs.env-security.result }}" != "success" ]]; then
            echo "‚ùå Critical security issues detected!"
            echo "Please review the failed checks and address any security vulnerabilities before proceeding."
            exit 1
          else
            echo "‚úÖ All security checks passed!"
          fi