name: 🚀 CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Quality Gates - Type checking, linting, and build validation
  quality-checks:
    name: 🔍 Quality & Build Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Prepare SvelteKit
        run: pnpm run prepare

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: ⚡ Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .svelte-kit
            build
          key: build-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-cache-${{ runner.os }}-

  # Parallel job for type checking and linting
  code-quality:
    name: 🧹 TypeScript & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Prepare SvelteKit
        run: pnpm run prepare

      - name: 🔎 TypeScript & Svelte checks
        run: pnpm run check

      - name: 🧹 ESLint validation
        run: pnpm run lint || echo "ESLint found issues but build continues"
        continue-on-error: true

      - name: 💅 Prettier format check
        run: pnpm run format:check || echo "Formatting issues found but build continues"
        continue-on-error: true

  # Preview build testing (optional but good practice)
  preview-test:
    name: 🔬 Preview Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-checks]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ⚡ Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            .svelte-kit
            build
          key: build-cache-${{ runner.os }}-${{ github.sha }}

      - name: 📋 Install dependencies (if cache miss)
        run: pnpm install --frozen-lockfile

      - name: 🔧 Prepare SvelteKit (if cache miss)
        run: pnpm run prepare

      - name: 🏗️ Build (if cache miss)
        run: pnpm run build
        if: steps.cache.outputs.cache-hit != 'true'

      - name: 🔍 Test preview server
        run: |
          pnpm run preview &
          PREVIEW_PID=$!
          sleep 5
          
          # Basic health check
          curl -f http://localhost:4173/ || exit 1
          
          # Kill preview server
          kill $PREVIEW_PID || true

  # Security and dependency audit
  security-audit:
    name: 🔒 Security & Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: 📊 List outdated packages
        run: pnpm outdated
        continue-on-error: true

  # Final status check (required for PR merging)
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality-checks, code-quality]
    if: always()

    steps:
      - name: ✅ Mark CI as successful
        if: needs.quality-checks.result == 'success' && needs.code-quality.result == 'success'
        run: |
          echo "🎉 All quality checks passed!"
          echo "✅ Build: ${{ needs.quality-checks.result }}"
          echo "✅ Code Quality: ${{ needs.code-quality.result }}"

      - name: ❌ Mark CI as failed
        if: needs.quality-checks.result != 'success' || needs.code-quality.result != 'success'
        run: |
          echo "❌ CI pipeline failed"
          echo "🏗️ Build: ${{ needs.quality-checks.result }}"
          echo "🧹 Code Quality: ${{ needs.code-quality.result }}"
          exit 1

  # Vercel deployment status (informational)
  vercel-status:
    name: 🌐 Vercel Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [ci-success]

    steps:
      - name: 📢 Deployment notification
        run: |
          echo "🚀 Production deployment triggered"
          echo "📍 Branch: ${{ github.ref_name }}"
          echo "🔗 Vercel will deploy automatically"
          echo "📊 Monitor deployment at: https://vercel.com/dashboard"